from typing import Sequence, Union

from dataset_util.mm_dataset import MMDataset

"""
 50 steps: μ=0.01, σ=0.052446: α=17.182721138, error=1e-09
 27 steps: μ=0.02, σ=0.072191: α=11.775637627, error=0.0
 50 steps: μ=0.03, σ=0.087025: α=9.401257038, error=3e-09
 50 steps: μ=0.04, σ=0.099270: α=7.980178118, error=1e-09
 50 steps: μ=0.05, σ=0.109834: α=7.003067255, error=1.4e-08
 50 steps: μ=0.06, σ=0.119182: α=6.275565863, error=2e-09
 26 steps: μ=0.07, σ=0.127588: α=5.705163479, error=0.0
 50 steps: μ=0.08, σ=0.135233: α=5.241407156, error=6e-09
 50 steps: μ=0.09, σ=0.142237: α=4.854089022, error=2.6e-08
 50 steps: μ=0.10, σ=0.148693: α=4.523848772, error=1.3e-08
 50 steps: μ=0.11, σ=0.154667: α=4.237612963, error=1e-09
 50 steps: μ=0.12, σ=0.160212: α=3.986181140, error=5e-09
 50 steps: μ=0.13, σ=0.165371: α=3.762866378, error=2.5e-08
 50 steps: μ=0.14, σ=0.170177: α=3.562676787, error=1e-09
 50 steps: μ=0.15, σ=0.174659: α=3.381783605, error=9e-09
 50 steps: μ=0.16, σ=0.178840: α=3.217198491, error=4e-09
 50 steps: μ=0.17, σ=0.182740: α=3.066562772, error=1.3e-08
 50 steps: μ=0.18, σ=0.186376: α=2.927951932, error=8e-09
 50 steps: μ=0.19, σ=0.189764: α=2.799820542, error=2e-09
 50 steps: μ=0.20, σ=0.192916: α=2.680883050, error=1.2e-08
 50 steps: μ=0.21, σ=0.195843: α=2.570069909, error=7e-09
 50 steps: μ=0.22, σ=0.198557: α=2.466465592, error=1.6e-08
 50 steps: μ=0.23, σ=0.201065: α=2.369313359, error=5.5e-08
 50 steps: μ=0.24, σ=0.203376: α=2.277950406, error=5e-09
 50 steps: μ=0.25, σ=0.205497: α=2.191817641, error=3e-08
 50 steps: μ=0.26, σ=0.207434: α=2.110426068, error=3.9e-08
 50 steps: μ=0.27, σ=0.209195: α=2.033339381, error=1.1e-08
 50 steps: μ=0.28, σ=0.210783: α=1.960194170, error=5.8e-08
 50 steps: μ=0.29, σ=0.212204: α=1.890651762, error=8e-09
 50 steps: μ=0.30, σ=0.213462: α=1.824428737, error=1.2e-08
 50 steps: μ=0.31, σ=0.214562: α=1.761253655, error=2.7e-08
 50 steps: μ=0.32, σ=0.215508: α=1.700910032, error=2.3e-08
 50 steps: μ=0.33, σ=0.216302: α=1.643171370, error=1.7e-08
 50 steps: μ=0.34, σ=0.216949: α=1.587872684, error=4e-09
 50 steps: μ=0.35, σ=0.217451: α=1.534830272, error=2.4e-08
 50 steps: μ=0.36, σ=0.217812: α=1.483900368, error=4.5e-08
 50 steps: μ=0.37, σ=0.218032: α=1.434940398, error=2.5e-08
 50 steps: μ=0.38, σ=0.218117: α=1.387823641, error=5e-09
 50 steps: μ=0.39, σ=0.218066: α=1.342436135, error=4.4e-08
 50 steps: μ=0.40, σ=0.217883: α=1.298679054, error=3.6e-08
 50 steps: μ=0.41, σ=0.217570: α=1.256450474, error=6.3e-08
 50 steps: μ=0.42, σ=0.217128: α=1.215666711, error=1.7e-08
 50 steps: μ=0.43, σ=0.216559: α=1.176238358, error=2.3e-08
 50 steps: μ=0.44, σ=0.215865: α=1.138099611, error=2.7e-08
 50 steps: μ=0.45, σ=0.215047: α=1.101176679, error=1.8e-08
 50 steps: μ=0.46, σ=0.214107: α=1.065411150, error=5.1e-08
 50 steps: μ=0.47, σ=0.213046: α=1.030737221, error=3.1e-08
 50 steps: μ=0.48, σ=0.211865: α=0.997098774, error=4.9e-08
 50 steps: μ=0.49, σ=0.210566: α=0.964450210, error=3.9e-08
 21 steps: μ=0.50, σ=0.209149: α=0.932742596, error=0.0
 50 steps: μ=0.51, σ=0.207617: α=0.901931435, error=1e-08
 50 steps: μ=0.52, σ=0.205968: α=0.871971875, error=1.9e-08
 50 steps: μ=0.53, σ=0.204205: α=0.842826575, error=9.1e-08
 50 steps: μ=0.54, σ=0.202329: α=0.814461082, error=2.1e-08
 50 steps: μ=0.55, σ=0.200340: α=0.786839336, error=1.2e-08
 50 steps: μ=0.56, σ=0.198239: α=0.759927899, error=5.7e-08
 50 steps: μ=0.57, σ=0.196026: α=0.733701438, error=5.2e-08
 50 steps: μ=0.58, σ=0.193703: α=0.708126396, error=4.3e-08
 50 steps: μ=0.59, σ=0.191270: α=0.683181912, error=2.6e-08
 50 steps: μ=0.60, σ=0.188727: α=0.658830315, error=3.6e-08
 50 steps: μ=0.61, σ=0.186075: α=0.635061234, error=1.4e-08
 50 steps: μ=0.62, σ=0.183314: α=0.611844927, error=5.5e-08
 50 steps: μ=0.63, σ=0.180446: α=0.589166909, error=6.4e-08
 50 steps: μ=0.64, σ=0.177470: α=0.566998154, error=1.4e-08
 50 steps: μ=0.65, σ=0.174387: α=0.545328051, error=2.4e-08
 50 steps: μ=0.66, σ=0.171197: α=0.524127394, error=3.3e-08
 50 steps: μ=0.67, σ=0.167900: α=0.503391117, error=1.7e-08
 50 steps: μ=0.68, σ=0.164497: α=0.483094767, error=5.2e-08
 50 steps: μ=0.69, σ=0.160989: α=0.463228777, error=2e-09
 50 steps: μ=0.70, σ=0.157374: α=0.443770811, error=4.8e-08
 50 steps: μ=0.71, σ=0.153654: α=0.424717829, error=9.8e-08
 50 steps: μ=0.72, σ=0.149829: α=0.406046525, error=3.1e-08
 50 steps: μ=0.73, σ=0.145898: α=0.387744740, error=1e-07
 50 steps: μ=0.74, σ=0.141862: α=0.369805560, error=6.9e-08
 22 steps: μ=0.75, σ=0.137722: α=0.352214098, error=0.0
 50 steps: μ=0.76, σ=0.133476: α=0.334958985, error=1e-08
 50 steps: μ=0.77, σ=0.129125: α=0.318029895, error=1.9e-08
 50 steps: μ=0.78, σ=0.124671: α=0.301421210, error=9.1e-08
 50 steps: μ=0.79, σ=0.120111: α=0.285117015, error=2.1e-08
 50 steps: μ=0.80, σ=0.115446: α=0.269109353, error=1.2e-08
 50 steps: μ=0.81, σ=0.110677: α=0.253391460, error=5.7e-08
 50 steps: μ=0.82, σ=0.105802: α=0.237952627, error=7e-09
 50 steps: μ=0.83, σ=0.100823: α=0.222787432, error=4.3e-08
 50 steps: μ=0.84, σ=0.095739: α=0.207883976, error=3.3e-08
 50 steps: μ=0.85, σ=0.090551: α=0.193239711, error=2.4e-08
 50 steps: μ=0.86, σ=0.085256: α=0.178842880, error=1.05e-07
 50 steps: μ=0.87, σ=0.079857: α=0.164688148, error=5.5e-08
 50 steps: μ=0.88, σ=0.074353: α=0.150770448, error=5.5e-08
 50 steps: μ=0.89, σ=0.068742: α=0.137081109, error=4.5e-08
 50 steps: μ=0.90, σ=0.063027: α=0.123615321, error=9.5e-08
 50 steps: μ=0.91, σ=0.057204: α=0.110364292, error=3.3e-08
 50 steps: μ=0.92, σ=0.051276: α=0.097326089, error=1.03e-07
 50 steps: μ=0.93, σ=0.045242: α=0.084493276, error=7e-09
 50 steps: μ=0.94, σ=0.039101: α=0.071861994, error=5.7e-08
 50 steps: μ=0.95, σ=0.032852: α=0.059422625, error=4.8e-08
 50 steps: μ=0.96, σ=0.026497: α=0.047175875, error=3.8e-08
 50 steps: μ=0.97, σ=0.020035: α=0.035115806, error=2.9e-08
 50 steps: μ=0.98, σ=0.013465: α=0.023235735, error=4.1e-0
 50 steps: μ=0.99, σ=0.006786: α=0.011530866, error=1e-08
"""

"""
This lookup table is built for Standard Motion Models (SMM) on 128x128
normalized perlin noise environments (inverse_scale=4, inverse_octaves=16). The shape
parameter controls the (estimated) expected pixel value (epxv) by exponentially scaling
the data, controlling the degree of bias within the motion model.

	epxv = average(image ** shape)

Because this operation is relatively costly, the pixels are stored as a natural-log form.
Then the array can be more efficiently scaled using the exponential function:

	log_px = log(px) if px > 0 else -inf
	image ** shape = e ** (shape * log(image))

Note the exception of px=0 (it is assumed px>=0), as log(0) is undefined. However, the
numpy library's exp-function will map -inf to 0.

	np.exp(-inf) = 0

Example usage for this table:
	expv = 0.31
	scaled_arr = np.exp(imm_epxv_shape_map[expv] * arr)
"""
smm_epxv_shape_map = {
	0.01: 17.182721138, 0.02: 11.775637627, 0.03:  9.401257038, 0.04:  7.980178118, 0.05:  7.003067255,
	0.06:  6.275565863, 0.07:  5.705163479, 0.08:  5.241407156, 0.09:  4.854089022, 0.10:  4.523848772,
	0.11:  4.237612963, 0.12:  3.986181140, 0.13:  3.762866378, 0.14:  3.562676787, 0.15:  3.381783605,
	0.16:  3.217198491, 0.17:  3.066562772, 0.18:  2.927951932, 0.19:  2.799820542, 0.20:  2.680883050,
	0.21:  2.570069909, 0.22:  2.466465592, 0.23:  2.369313359, 0.24:  2.277950406, 0.25:  2.191817641,
	0.26:  2.110426068, 0.27:  2.033339381, 0.28:  1.960194170, 0.29:  1.890651762, 0.30:  1.824428737,
	0.31:  1.761253655, 0.32:  1.700910032, 0.33:  1.643171370, 0.34:  1.587872684, 0.35:  1.534830272,
	0.36:  1.483900368, 0.37:  1.434940398, 0.38:  1.387823641, 0.39:  1.342436135, 0.40:  1.298679054,
	0.41:  1.256450474, 0.42:  1.215666711, 0.43:  1.176238358, 0.44:  1.138099611, 0.45:  1.101176679,
	0.46:  1.065411150, 0.47:  1.030737221, 0.48:  0.997098774, 0.49:  0.964450210, 0.50:  0.932742596,

	0.51:  0.901931435, 0.52:  0.871971875, 0.53:  0.842826575, 0.54:  0.814461082, 0.55:  0.786839336,
	0.56:  0.759927899, 0.57:  0.733701438, 0.58:  0.708126396, 0.59:  0.683181912, 0.60:  0.658830315,
	0.61:  0.635061234, 0.62:  0.611844927, 0.63:  0.589166909, 0.64:  0.566998154, 0.65:  0.545328051,
	0.66:  0.524127394, 0.67:  0.503391117, 0.68:  0.483094767, 0.69:  0.463228777, 0.70:  0.443770811,
	0.71:  0.424717829, 0.72:  0.406046525, 0.73:  0.387744740, 0.74:  0.369805560, 0.75:  0.352214098,
	0.76:  0.334958985, 0.77:  0.318029895, 0.78:  0.301421210, 0.79:  0.285117015, 0.80:  0.269109353,
	0.81:  0.253391460, 0.82:  0.237952627, 0.83:  0.222787432, 0.84:  0.207883976, 0.85:  0.193239711,
	0.86:  0.178842880, 0.87:  0.164688148, 0.88:  0.150770448, 0.89:  0.137081109, 0.90:  0.123615321,
	0.91:  0.110364292, 0.92:  0.097326089, 0.93:  0.084493276, 0.94:  0.071861994, 0.95:  0.059422625,
	0.96:  0.047175875, 0.97:  0.035115806, 0.98:  0.023235735, 0.99:  0.011530866, 
}

class SMMDataset(MMDataset):
	def __init__(self, xs_files:Union[str,Sequence[str]], ys_file:Union[str,Sequence[str]], epsilon:float=1) -> None:
		super().__init__(smm_epxv_shape_map, xs_files, ys_file, epsilon)

	@classmethod
	def from_density(cls, xs_files:Union[str,Sequence[str]], ys_file:Union[str,Sequence[str]], density:float) -> 'SMMDataset':
		return cls(xs_files, ys_file, smm_epxv_shape_map[density])
